# The files generated by Lex& Yacc are available on KWData sources directory : KWCYac.cpp, KWCYac.hpp, KWCLex.inc
#
# It is possible to regenerate them (when the *.lex or *.yac files are modified) with the option BUILD_LEX_YACC the
# generated files are located on the build tree and the legacy ones are not used(and not modified).
if(BUILD_LEX_YACC)
  bison_target(KWCParser KWCYac.yac ${CMAKE_CURRENT_SOURCE_DIR}/KWCYac.cpp)
  if(MSVC)
    flex_target(KWCScanner KWCLex.lex KWCLex.inc COMPILE_FLAGS "--nounistd")
  else()
    flex_target(KWCScanner KWCLex.lex KWCLex.inc)
  endif(MSVC)
  add_flex_bison_dependency(KWCScanner KWCParser)
else()
  # We defined the Bison / Flex generated files with the files already present
  set(BISON_KWCParser_OUTPUTS ${CMAKE_CURRENT_SOURCE_DIR}/KWCYac.cpp)
  set(FLEX_KWCScanner_OUTPUTS ${CMAKE_CURRENT_SOURCE_DIR}/KWCLex.inc)
endif()

# The outputs of Bison /Flex are managed separately from the list of standard cpp files
file(GLOB cppfiles ${CMAKE_CURRENT_SOURCE_DIR}/*.cpp)
list(REMOVE_ITEM cppfiles ${BISON_KWCParser_OUTPUTS} ${FLEX_KWCScanner_OUTPUTS})

# WARNING we can use the GLOB way to add cpp files because KWCYac.cpp, KWCLex.inc are bison and flex targets (then bison
# and flex are launched if lex& yac files are modified)
add_library(KWData STATIC ${cppfiles} ${BISON_KWCParser_OUTPUTS} ${FLEX_KWCScanner_OUTPUTS})

set_khiops_options(KWData)
target_include_directories(KWData PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})
target_link_libraries(KWData PUBLIC KWUtils PLParallelTask)
