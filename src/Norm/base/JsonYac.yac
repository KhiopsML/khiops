%{
/* Parser de json, inspire de la grammaire  de reference https://www.json.org/json-en.html */

#include "Object.h"
#include "ALString.h"
#include "TextService.h"
#include "JsonObject.h"

/* Declaration du lexer utilise */
int jsonlex();

/* Methode de gestion des erreurs */
void jsonerror(char const *fmt);
const ALString jsonPrintableValue(const ALString& sValue);

/* Objet json principal a utiliser pendant la lecture d'un fichier. */
/* Ce domaine est positionner par la methode ReadFile de JsonObject */
static JsonObject* mainReadJsonObject=NULL;

/* Work around a bug in the relation between bison and GCC 3.x: */
#if defined (__GNUC__) && 3 <= __GNUC__
#define __attribute__(arglist)
#endif

/* Nombre total d'erreurs de parsing */
static int nJsonFileParsingErrorNumber = 0;

// Desactivation de warnings pour le Visual C++
#ifdef __MSC__
#pragma warning(disable : 4702) // C4702: unreachable code (mal gere par Visual C++)
#endif                          // __MSC__

#define YY_STATIC

/* Debugging YAC */

/*
#define YYDEBUG 1 
extern char   *yyptok(int i); 
*/

%}

%define api.prefix {json}

%union {
  ALString* sValue;
  double dValue;
  boolean bValue;
  JsonValue* jsonValue;
  JsonObject* jsonObject;
  JsonArray* jsonArray;
  JsonMember* jsonMember;
};

%token <sValue>    STRINGVALUE
%token <dValue>    NUMBERVALUE
%token <bValue>    BOOLEANVALUE
%token <sValue>    STRINGERROR
%token <sValue>    ERROR
%token NULLVALUE 
%type <jsonObject> jsonFile
%type <jsonValue> value
%type <jsonObject> object
%type <jsonObject> members
%type <jsonMember> member
%type <jsonArray> array
%type <jsonArray> values


/* Parametrage du destructeur a appeler en cas d'erreur */
%destructor {if ($$ != NULL) delete $$; $$=NULL;} <sValue> <jsonValue> <jsonObject> <jsonArray> <jsonMember>


%start jsonFile

%%

jsonFile: object
    {
		JsonObject* jsonObject;
		JsonMember* member;
		int i;
		
		// On memorise l'objet construit, qui sera detruit par le parser
		jsonObject = $1;
		$$ = jsonObject;

		// Transfert du contenu vers l'objet principal
		assert(mainReadJsonObject->GetMemberNumber() == 0);
		for (i = 0; i < jsonObject->GetMemberNumber(); i++)
		{
			member = jsonObject->GetMemberAt(i);
			mainReadJsonObject->AddMember(member);
		}
		jsonObject->RemoveAll();
	}
	| error
	{
		$$ = NULL;
		YYABORT;
	}
	;


value: object     { $$ = $1; } 
	| array   { $$ = $1; } 
	| STRINGVALUE  
	{ 
		JsonString* jsonString;
		
		// Creation d'une valeur chaine de caractere
		jsonString = new JsonString;
		$$ = jsonString;

		// Alimentation
		jsonString->SetString(*$1);
		delete $1;
	}
	| NUMBERVALUE
	{ 
		JsonNumber* jsonNumber;
		double dValue;
		
		// Creation d'une valeur chaine de caractere
		jsonNumber = new JsonNumber;
		$$ = jsonNumber;

		// Alimentation
		dValue = $1;
		jsonNumber->SetNumber(dValue);
	}
	| BOOLEANVALUE
	{ 
		JsonBoolean* jsonBoolean;
		boolean bValue;
		
		// Creation d'une valeur chaine de caractere
		jsonBoolean = new JsonBoolean;
		$$ = jsonBoolean;

		// Alimentation
		bValue = $1;
		jsonBoolean->SetBoolean(bValue);
	}
	| NULLVALUE
	{ 
		JsonNull* jsonNull;
		
		// Creation d'une valeur chaine de caractere
		jsonNull = new JsonNull;
		$$ = jsonNull;
	}
	| STRINGERROR  
	{ 
		// Message d'erreur
		jsonerror("Invalid json string \"" + jsonPrintableValue(*$1) + "\" with non-utf8 encoding");

		// Nettoyage et sortie
		delete $1;
		$$ = NULL;
		YYABORT;
	}
	| ERROR  
	{ 
		ALString sValueError;

		// Message d'erreur, avec indication de la valeur sauf si elle se reduit au caractete '"'
		if (*$1 != "\"")
			sValueError = " \"" + jsonPrintableValue(*$1) + "\"";
		jsonerror("Invalid json value" + sValueError);

		// Nettoyage et sortie
		delete $1;
		$$ = NULL;
		YYABORT;
	}
	;

object: '{' '}'            
	{ $$ = new JsonObject; }
	| '{' members '}'  
	{ $$ = $2; }
	;

members: member                    
	{ 
		JsonObject* jsonObject;
		JsonMember* member;
		
		// Creation d'un objet json
		jsonObject = new JsonObject;
		$$ = jsonObject;
		
		// Alimentation avec un premier membre d'objet
		member = cast(JsonMember*, $1); 
		jsonObject->AddMember(member);
	}
	| members ',' member
	{ 
		JsonObject* jsonObject;
		JsonMember* member;
		ALString sJsonKey;
		
		// On recupere l'objet json en cours
		jsonObject = cast(JsonObject*, $1);
		$$ = jsonObject;
		
		// Ajout d'un nouveau membre d'objet, s'il n'en existe pas deja un du meme nom
		member = cast(JsonMember*, $3);
		if (jsonObject->LookupMember(member->GetKey()) == NULL)
			jsonObject->AddMember(member);
		// Erreur sinon
		else
		{
			TextService::CToJsonString(member->GetKey(), sJsonKey);
			jsonerror("Duplicate key \"" + jsonPrintableValue(sJsonKey) + "\" in json object");

			// Nettoyage et sortie
			delete member;
			delete jsonObject;
			$$ = NULL;
			YYABORT;
		}
	}
	| STRINGERROR  
	{ 
		// Message d'erreur
		jsonerror("Invalid json key \"" + jsonPrintableValue(*$1) + "\" with non-utf8 encoding");

		// Nettoyage et sortie
		delete $1;
		$$ = NULL;
		YYABORT;
	}
	| ERROR  
	{ 
		ALString sValueError;

		// Message d'erreur, avec indication de la valeur sauf si elle se reduit au caractete '"'
		if (*$1 != "\"")
			sValueError = " \"" + jsonPrintableValue(*$1) + "\"";
		jsonerror("Invalid json key" + sValueError);

		// Nettoyage et sortie
		delete $1;
		$$ = NULL;
		YYABORT;
	}
	;

member: STRINGVALUE ':' value 	 
	{ 
		JsonMember* member;
		JsonValue* jsonValue;

		// Creation d'un membre d'objet
		member = new JsonMember;
		$$ = member;

		// Alimentation
		jsonValue = cast(JsonValue*, $3);
		member->SetKey(*$1);
		member->SetValue(jsonValue);
		delete $1;
	}
	;

array: '[' ']'
	{ $$ = new JsonArray; }
	| '[' values ']'  
	{ $$ = $2; }
	;

values: value
	{ 
		JsonArray* jsonArray;
		JsonValue* jsonValue;
		
		// Creation d'un tableau de valeur
		jsonArray = new JsonArray;
		$$ = jsonArray;
		
		// Alimentation avec un premier membre d'objet
		jsonValue = cast(JsonValue*, $1); 
		jsonArray->AddValue(jsonValue);
	}
	| values ',' value   
	{ 
		JsonArray* jsonArray;
		JsonValue* jsonValue;
		
		// On recupere le tableau en cours
		jsonArray = cast(JsonArray*, $1);
		$$ = jsonArray;
		
		// Ajout d'un nouveau membre d'objet
		jsonValue = cast(JsonValue*, $3); 
		jsonArray->AddValue(jsonValue);
	}
	;

%%


#include "JsonLex.inc"

/* default yyerror for YACC and LEX */
void jsonerror(char const *fmt)
{
  char sErrorLine[20];
  ALString sLabel;

  nJsonFileParsingErrorNumber++;
  snprintf(sErrorLine, sizeof(sErrorLine), "Line %d", yylineno);
  sLabel = fmt;
  Global::AddError("Read json file",
                    sErrorLine,
                    sLabel);
}

const ALString jsonPrintableValue(const ALString& sValue)
{
	const int nMaxPrintableLength = 30;

	if (sValue.GetLength() <= nMaxPrintableLength)
		return sValue;
	else
		return sValue.Left(nMaxPrintableLength) + "...";
}

int jsonparse();

/* Implementation de la methode de lecture de fichier de KWClassDomain */
boolean JsonObject::ReadFile(const ALString& sFileName)
{
  boolean bOk = true;
  FILE* fFile;
  ALString sLocalFileName;

  /* Affichage de stats memoire si log memoire actif */
  MemoryStatsManager::AddLog(GetClassLabel() + " " + sFileName + " ReadFile Begin");

  /* Initialisation de l'objet json principal a utiliser pour la lecture */
  assert(mainReadJsonObject == NULL);
  mainReadJsonObject = this;
  mainReadJsonObject->DeleteAll();

  /* Erreur si pas de nom de fichier */
  fFile = NULL;
  if (sFileName == "")
  {
     AddError("Missing file name");
	 bOk = false;
  }
  /* Sinon, ouverture du fichier */
  else
  { 
		// Copie depuis un fichier distant si necessaire
		bOk = PLRemoteFileService::BuildInputWorkingFile(sFileName, sLocalFileName);
		if (bOk)
			bOk = FileService::OpenInputBinaryFile(sLocalFileName, fFile);
  }

  /* On continue si fichier ouvert correctement */
  if (bOk)
  {
    assert(fFile != NULL);

	/* Activation du nombre max d'erreurs a afficher */
	nJsonFileParsingErrorNumber = 0;
	Global::ActivateErrorFlowControl();

    /* Positionnement du fichier a parser par la variable yyin de LEX */
    jsonlineno = 1;
    jsonrestart(fFile);
    
	/* Parsing */
    jsonparse();

	/* Cleaning lexer */
	jsonlex_destroy();

    /* Fermeture du fichier */
	FileService::CloseInputBinaryFile(sLocalFileName, fFile);
	
	/* Si fichier distant, on supprime la copie locale */
	PLRemoteFileService::CleanInputWorkingFile(sFileName, sLocalFileName);

	/* Desactivation du nombre max d'erreurs a afficher */
	Global::DesactivateErrorFlowControl();

    /* Nettoyage si erreurs */
	if (nJsonFileParsingErrorNumber > 0)
    {
	  /* Destruction du contenu de l'objet construit */
	  mainReadJsonObject->DeleteAll();

	  /* En cas d'erreur, ajout d'une ligne blanche pour separer des autres logs */
      AddError("Errors detected during parsing " + sFileName + ": read operation cancelled");
	  bOk = false;
	}
	nJsonFileParsingErrorNumber = 0;
  }

  /* Nettoyage */
  mainReadJsonObject = NULL;

  /* Affichage de stats memoire si log memoire actif */
  MemoryStatsManager::AddLog(GetClassLabel() + " " + sFileName + " ReadFile End");

  return bOk;
}

void JsonObject::SetLineno(int nValue)
{
	jsonlineno = nValue;
}

int JsonObject::GetLineno()
{
	return jsonlineno;
}

void JsonObject::Restart(FILE* inputFile) 
{
	jsonrestart(inputFile);
}

int JsonObject::Lex(JSONSTYPE* jsonValue)
{
	int nToken;

	require(jsonValue != NULL);

	// Lecture du token, puis de sa valeur
	nToken = jsonlex();
	*jsonValue = jsonlval;
	return nToken;
}

int JsonObject::LexDestroy()
{
	return jsonlex_destroy();
}


